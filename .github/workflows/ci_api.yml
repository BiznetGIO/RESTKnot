name: CI (API)

on:
  push:
    paths:
      -  api/**
      - .github/workflows/ci_api.yml
  pull_request:
    paths:
      -  api/**
      - .github/workflows/ci_api.yml


defaults:
  run:
    working-directory: api

jobs:

  code_quality:
    name: Code Quality
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
          python-version: '3.10'

    - name: Cache poetry install
      uses: actions/cache@v2
      with:
        path: ~/.local
        key: poetry-1.2.2

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
          version: 1.2.2
          virtualenvs-create: true
          virtualenvs-in-project: true

    - name: Cache deps
      id: cache-deps
      uses: actions/cache@v2
      with:
        path: .venv
        key: pydeps-${{ hashFiles('**/poetry.lock') }}

    - name: Install confluent-kafka prerequisites
      run: |
        sudo apt-get install --yes librdkafka-dev python3-dev

    - name: Install psycopg2 prerequisites
      run: |
        sudo apt-get install --yes build-essential libpq-dev

    - name: Install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        poetry install --no-interaction --no-root

    - name: Install latest just release
      uses: extractions/setup-just@v1

    - name: Install latest dprint release
      uses: taiki-e/install-action@v1
      with:
        tool: dprint

    - name: Lint
      # currently cli is not-maintained
      run: |
        # activate the venv
        . .venv/bin/activate

        just fmt-check
        just lint

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']
        # container operations are only supported on Linux runners
        os: [ubuntu-22.04]

    services:
      # it is hard to setup locally installed postgres,
      # such as setting the password.

      # TravisCI and build.sr.ht use empty password as default
      # but that doesn't work with Github action.
      # you need to work with `pg_hba.conf` or using `sudo -u postgres`
      # but the latter force you to install every dependency in in root PATH.
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          # set the password without messing with `pg_hba.conf`
          POSTGRES_PASSWORD: postgres
          # create default db
          POSTGRES_DB: knotdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache poetry install
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.2.2

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      - name: Install confluent-kafka prerequisites
        run: |
          sudo apt-get install --yes librdkafka-dev python3-dev

      - name: Install psycopg2 prerequisites
        run: |
          sudo apt-get install --yes build-essential libpq-dev

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root

      - name: Install latest just release
        uses: extractions/setup-just@v1

      - name: Unit tests
        run: |
          # activate the venv
          . .venv/bin/activate

          just _test-unit

      - name: Check DB version
        # pass `-h localhost` to use TCP connection. Otherwise, it will talk to locally installed postgres
        run: psql -h localhost  -p ${{ job.services.postgres.ports[5432] }} -U postgres --version
        env:
          # to avoid having password prompt
          PGPASSWORD: postgres

      - name: Create DB schema
        run: |
          psql -h localhost  -p ${{ job.services.postgres.ports[5432] }} -U postgres knotdb < api/tests/integration/test_schema.sql
        env:
          PGPASSWORD: postgres

      - name: Prepare for Integration tests
        run: |
          # use default location, instead setting the `RESTKNOT_CONFIG_FILE`
          cp  api/config.example.yml api/config.yml

      - name: Integration tests
        run: |
          # activate the venv
          . .venv/bin/activate

          just test
