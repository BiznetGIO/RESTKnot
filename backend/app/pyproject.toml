[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = ["Admin <admin@example.com>"]

[tool.poetry.dependencies]
python = "^3.7"
uvicorn = "^0.11.3"
fastapi = "^0.54.1"
email-validator = "^1.0.5"
pydantic = "^1.4"
gunicorn = "^20.0.4"
psycopg = "3.0.8"
requests = "2.21.0"
PyYAML= "5.4"
confluent-kafka = "1.7.0"


[tool.poetry.extras]
c = ["psycopg-c"]
binary = ["psycopg-binary"]

[tool.poetry.dev-dependencies]
mypy = "^0.930"
black = "^21.12b0"
isort = "^5.10.1"
pylint = "^2.12.2"
pytest = "^5.4.1"
pytest-cov = "^2.8.1"

[tool.black]
extend-exclude = '''
/(
    | cli
)/
'''


[tool.isort]
profile = "black"
# sections = ["STDLIB", "TYPE", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
sections = ["TYPE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_type = ["typing"]
known_first_party = "app, dnsagent"
skip_glob = "cli/*"

[tool.pylint.messages_control]
disable = [
  # regex needs to be as is
  "anomalous-backslash-in-string",
  "missing-docstring",
  # trigger false error in recurusive function
  "no-else-return",
  # they are mostly a schema file and configs
  "duplicate-code",
  # line and imports are handled by black
  "line-too-long",
  # short variable is more appropriate in some places
  # such `e` for `error`
  "invalid-name",
  # necessary in decorator
  "broad-except",
  # flask use class boilerplate everywhere
  "no-self-use",
  "too-many-return-statements",
  # mypy needs many validation for `Optional` return type
  "too-many-branches",
  "too-many-statements",
  # misc
  "too-many-locals",
  "too-many-arguments",
  "inconsistent-return-statements",
  "raise-missing-from",
  "fixme",
  # test
  # Test is important as code
  # It makes refactoring a breeze
  "too-few-public-methods",
  # pytest boilerplate
  "no-member",
]

[tool.pylint.master]
ignore-paths = [
    "^api/app/vendors/.*$",
    "^api/tests/load/.*$",
]
# https://github.com/samuelcolvin/pydantic/issues/1961
extension-pkg-whitelist = ["pydantic"]

[tool.mypy]
ignore_missing_imports = true
exclude = "cli"